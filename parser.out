Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> ltl
Rule 1     ltl -> expression
Rule 2     ltl -> empty
Rule 3     expression -> expression AND expression
Rule 4     expression -> expression OR expression
Rule 5     expression -> expression IMPLIES expression
Rule 6     expression -> expression DIMPLIES expression
Rule 7     expression -> expression UNTIL expression
Rule 8     expression -> NOT expression
Rule 9     expression -> NEXT expression
Rule 10    expression -> EVENTUALLY expression
Rule 11    expression -> GLOBALLY expression
Rule 12    expression -> LPAR expression RPAR
Rule 13    expression -> TERM
Rule 14    expression -> TRUE
Rule 15    expression -> FALSE
Rule 16    empty -> <empty>

Terminals, with rules where they appear

AND                  : 3
DIMPLIES             : 6
EVENTUALLY           : 10
FALSE                : 15
GLOBALLY             : 11
IMPLIES              : 5
LPAR                 : 12
NEXT                 : 9
NOT                  : 8
OR                   : 4
RPAR                 : 12
TERM                 : 13
TRUE                 : 14
UNTIL                : 7
error                : 

Nonterminals, with rules where they appear

empty                : 2
expression           : 1 3 3 4 4 5 5 6 6 7 7 8 9 10 11 12
ltl                  : 0

Parsing method: LALR

state 0

    (0) S' -> . ltl
    (1) ltl -> . expression
    (2) ltl -> . empty
    (3) expression -> . expression AND expression
    (4) expression -> . expression OR expression
    (5) expression -> . expression IMPLIES expression
    (6) expression -> . expression DIMPLIES expression
    (7) expression -> . expression UNTIL expression
    (8) expression -> . NOT expression
    (9) expression -> . NEXT expression
    (10) expression -> . EVENTUALLY expression
    (11) expression -> . GLOBALLY expression
    (12) expression -> . LPAR expression RPAR
    (13) expression -> . TERM
    (14) expression -> . TRUE
    (15) expression -> . FALSE
    (16) empty -> .

    NOT             shift and go to state 4
    NEXT            shift and go to state 5
    EVENTUALLY      shift and go to state 6
    GLOBALLY        shift and go to state 7
    LPAR            shift and go to state 8
    TERM            shift and go to state 9
    TRUE            shift and go to state 10
    FALSE           shift and go to state 11
    $end            reduce using rule 16 (empty -> .)

    ltl                            shift and go to state 1
    expression                     shift and go to state 2
    empty                          shift and go to state 3

state 1

    (0) S' -> ltl .



state 2

    (1) ltl -> expression .
    (3) expression -> expression . AND expression
    (4) expression -> expression . OR expression
    (5) expression -> expression . IMPLIES expression
    (6) expression -> expression . DIMPLIES expression
    (7) expression -> expression . UNTIL expression

    $end            reduce using rule 1 (ltl -> expression .)
    AND             shift and go to state 12
    OR              shift and go to state 13
    IMPLIES         shift and go to state 14
    DIMPLIES        shift and go to state 15
    UNTIL           shift and go to state 16


state 3

    (2) ltl -> empty .

    $end            reduce using rule 2 (ltl -> empty .)


state 4

    (8) expression -> NOT . expression
    (3) expression -> . expression AND expression
    (4) expression -> . expression OR expression
    (5) expression -> . expression IMPLIES expression
    (6) expression -> . expression DIMPLIES expression
    (7) expression -> . expression UNTIL expression
    (8) expression -> . NOT expression
    (9) expression -> . NEXT expression
    (10) expression -> . EVENTUALLY expression
    (11) expression -> . GLOBALLY expression
    (12) expression -> . LPAR expression RPAR
    (13) expression -> . TERM
    (14) expression -> . TRUE
    (15) expression -> . FALSE

    NOT             shift and go to state 4
    NEXT            shift and go to state 5
    EVENTUALLY      shift and go to state 6
    GLOBALLY        shift and go to state 7
    LPAR            shift and go to state 8
    TERM            shift and go to state 9
    TRUE            shift and go to state 10
    FALSE           shift and go to state 11

    expression                     shift and go to state 17

state 5

    (9) expression -> NEXT . expression
    (3) expression -> . expression AND expression
    (4) expression -> . expression OR expression
    (5) expression -> . expression IMPLIES expression
    (6) expression -> . expression DIMPLIES expression
    (7) expression -> . expression UNTIL expression
    (8) expression -> . NOT expression
    (9) expression -> . NEXT expression
    (10) expression -> . EVENTUALLY expression
    (11) expression -> . GLOBALLY expression
    (12) expression -> . LPAR expression RPAR
    (13) expression -> . TERM
    (14) expression -> . TRUE
    (15) expression -> . FALSE

    NOT             shift and go to state 4
    NEXT            shift and go to state 5
    EVENTUALLY      shift and go to state 6
    GLOBALLY        shift and go to state 7
    LPAR            shift and go to state 8
    TERM            shift and go to state 9
    TRUE            shift and go to state 10
    FALSE           shift and go to state 11

    expression                     shift and go to state 18

state 6

    (10) expression -> EVENTUALLY . expression
    (3) expression -> . expression AND expression
    (4) expression -> . expression OR expression
    (5) expression -> . expression IMPLIES expression
    (6) expression -> . expression DIMPLIES expression
    (7) expression -> . expression UNTIL expression
    (8) expression -> . NOT expression
    (9) expression -> . NEXT expression
    (10) expression -> . EVENTUALLY expression
    (11) expression -> . GLOBALLY expression
    (12) expression -> . LPAR expression RPAR
    (13) expression -> . TERM
    (14) expression -> . TRUE
    (15) expression -> . FALSE

    NOT             shift and go to state 4
    NEXT            shift and go to state 5
    EVENTUALLY      shift and go to state 6
    GLOBALLY        shift and go to state 7
    LPAR            shift and go to state 8
    TERM            shift and go to state 9
    TRUE            shift and go to state 10
    FALSE           shift and go to state 11

    expression                     shift and go to state 19

state 7

    (11) expression -> GLOBALLY . expression
    (3) expression -> . expression AND expression
    (4) expression -> . expression OR expression
    (5) expression -> . expression IMPLIES expression
    (6) expression -> . expression DIMPLIES expression
    (7) expression -> . expression UNTIL expression
    (8) expression -> . NOT expression
    (9) expression -> . NEXT expression
    (10) expression -> . EVENTUALLY expression
    (11) expression -> . GLOBALLY expression
    (12) expression -> . LPAR expression RPAR
    (13) expression -> . TERM
    (14) expression -> . TRUE
    (15) expression -> . FALSE

    NOT             shift and go to state 4
    NEXT            shift and go to state 5
    EVENTUALLY      shift and go to state 6
    GLOBALLY        shift and go to state 7
    LPAR            shift and go to state 8
    TERM            shift and go to state 9
    TRUE            shift and go to state 10
    FALSE           shift and go to state 11

    expression                     shift and go to state 20

state 8

    (12) expression -> LPAR . expression RPAR
    (3) expression -> . expression AND expression
    (4) expression -> . expression OR expression
    (5) expression -> . expression IMPLIES expression
    (6) expression -> . expression DIMPLIES expression
    (7) expression -> . expression UNTIL expression
    (8) expression -> . NOT expression
    (9) expression -> . NEXT expression
    (10) expression -> . EVENTUALLY expression
    (11) expression -> . GLOBALLY expression
    (12) expression -> . LPAR expression RPAR
    (13) expression -> . TERM
    (14) expression -> . TRUE
    (15) expression -> . FALSE

    NOT             shift and go to state 4
    NEXT            shift and go to state 5
    EVENTUALLY      shift and go to state 6
    GLOBALLY        shift and go to state 7
    LPAR            shift and go to state 8
    TERM            shift and go to state 9
    TRUE            shift and go to state 10
    FALSE           shift and go to state 11

    expression                     shift and go to state 21

state 9

    (13) expression -> TERM .

    AND             reduce using rule 13 (expression -> TERM .)
    OR              reduce using rule 13 (expression -> TERM .)
    IMPLIES         reduce using rule 13 (expression -> TERM .)
    DIMPLIES        reduce using rule 13 (expression -> TERM .)
    UNTIL           reduce using rule 13 (expression -> TERM .)
    $end            reduce using rule 13 (expression -> TERM .)
    RPAR            reduce using rule 13 (expression -> TERM .)


state 10

    (14) expression -> TRUE .

    AND             reduce using rule 14 (expression -> TRUE .)
    OR              reduce using rule 14 (expression -> TRUE .)
    IMPLIES         reduce using rule 14 (expression -> TRUE .)
    DIMPLIES        reduce using rule 14 (expression -> TRUE .)
    UNTIL           reduce using rule 14 (expression -> TRUE .)
    $end            reduce using rule 14 (expression -> TRUE .)
    RPAR            reduce using rule 14 (expression -> TRUE .)


state 11

    (15) expression -> FALSE .

    AND             reduce using rule 15 (expression -> FALSE .)
    OR              reduce using rule 15 (expression -> FALSE .)
    IMPLIES         reduce using rule 15 (expression -> FALSE .)
    DIMPLIES        reduce using rule 15 (expression -> FALSE .)
    UNTIL           reduce using rule 15 (expression -> FALSE .)
    $end            reduce using rule 15 (expression -> FALSE .)
    RPAR            reduce using rule 15 (expression -> FALSE .)


state 12

    (3) expression -> expression AND . expression
    (3) expression -> . expression AND expression
    (4) expression -> . expression OR expression
    (5) expression -> . expression IMPLIES expression
    (6) expression -> . expression DIMPLIES expression
    (7) expression -> . expression UNTIL expression
    (8) expression -> . NOT expression
    (9) expression -> . NEXT expression
    (10) expression -> . EVENTUALLY expression
    (11) expression -> . GLOBALLY expression
    (12) expression -> . LPAR expression RPAR
    (13) expression -> . TERM
    (14) expression -> . TRUE
    (15) expression -> . FALSE

    NOT             shift and go to state 4
    NEXT            shift and go to state 5
    EVENTUALLY      shift and go to state 6
    GLOBALLY        shift and go to state 7
    LPAR            shift and go to state 8
    TERM            shift and go to state 9
    TRUE            shift and go to state 10
    FALSE           shift and go to state 11

    expression                     shift and go to state 22

state 13

    (4) expression -> expression OR . expression
    (3) expression -> . expression AND expression
    (4) expression -> . expression OR expression
    (5) expression -> . expression IMPLIES expression
    (6) expression -> . expression DIMPLIES expression
    (7) expression -> . expression UNTIL expression
    (8) expression -> . NOT expression
    (9) expression -> . NEXT expression
    (10) expression -> . EVENTUALLY expression
    (11) expression -> . GLOBALLY expression
    (12) expression -> . LPAR expression RPAR
    (13) expression -> . TERM
    (14) expression -> . TRUE
    (15) expression -> . FALSE

    NOT             shift and go to state 4
    NEXT            shift and go to state 5
    EVENTUALLY      shift and go to state 6
    GLOBALLY        shift and go to state 7
    LPAR            shift and go to state 8
    TERM            shift and go to state 9
    TRUE            shift and go to state 10
    FALSE           shift and go to state 11

    expression                     shift and go to state 23

state 14

    (5) expression -> expression IMPLIES . expression
    (3) expression -> . expression AND expression
    (4) expression -> . expression OR expression
    (5) expression -> . expression IMPLIES expression
    (6) expression -> . expression DIMPLIES expression
    (7) expression -> . expression UNTIL expression
    (8) expression -> . NOT expression
    (9) expression -> . NEXT expression
    (10) expression -> . EVENTUALLY expression
    (11) expression -> . GLOBALLY expression
    (12) expression -> . LPAR expression RPAR
    (13) expression -> . TERM
    (14) expression -> . TRUE
    (15) expression -> . FALSE

    NOT             shift and go to state 4
    NEXT            shift and go to state 5
    EVENTUALLY      shift and go to state 6
    GLOBALLY        shift and go to state 7
    LPAR            shift and go to state 8
    TERM            shift and go to state 9
    TRUE            shift and go to state 10
    FALSE           shift and go to state 11

    expression                     shift and go to state 24

state 15

    (6) expression -> expression DIMPLIES . expression
    (3) expression -> . expression AND expression
    (4) expression -> . expression OR expression
    (5) expression -> . expression IMPLIES expression
    (6) expression -> . expression DIMPLIES expression
    (7) expression -> . expression UNTIL expression
    (8) expression -> . NOT expression
    (9) expression -> . NEXT expression
    (10) expression -> . EVENTUALLY expression
    (11) expression -> . GLOBALLY expression
    (12) expression -> . LPAR expression RPAR
    (13) expression -> . TERM
    (14) expression -> . TRUE
    (15) expression -> . FALSE

    NOT             shift and go to state 4
    NEXT            shift and go to state 5
    EVENTUALLY      shift and go to state 6
    GLOBALLY        shift and go to state 7
    LPAR            shift and go to state 8
    TERM            shift and go to state 9
    TRUE            shift and go to state 10
    FALSE           shift and go to state 11

    expression                     shift and go to state 25

state 16

    (7) expression -> expression UNTIL . expression
    (3) expression -> . expression AND expression
    (4) expression -> . expression OR expression
    (5) expression -> . expression IMPLIES expression
    (6) expression -> . expression DIMPLIES expression
    (7) expression -> . expression UNTIL expression
    (8) expression -> . NOT expression
    (9) expression -> . NEXT expression
    (10) expression -> . EVENTUALLY expression
    (11) expression -> . GLOBALLY expression
    (12) expression -> . LPAR expression RPAR
    (13) expression -> . TERM
    (14) expression -> . TRUE
    (15) expression -> . FALSE

    NOT             shift and go to state 4
    NEXT            shift and go to state 5
    EVENTUALLY      shift and go to state 6
    GLOBALLY        shift and go to state 7
    LPAR            shift and go to state 8
    TERM            shift and go to state 9
    TRUE            shift and go to state 10
    FALSE           shift and go to state 11

    expression                     shift and go to state 26

state 17

    (8) expression -> NOT expression .
    (3) expression -> expression . AND expression
    (4) expression -> expression . OR expression
    (5) expression -> expression . IMPLIES expression
    (6) expression -> expression . DIMPLIES expression
    (7) expression -> expression . UNTIL expression

    AND             reduce using rule 8 (expression -> NOT expression .)
    OR              reduce using rule 8 (expression -> NOT expression .)
    IMPLIES         reduce using rule 8 (expression -> NOT expression .)
    DIMPLIES        reduce using rule 8 (expression -> NOT expression .)
    UNTIL           reduce using rule 8 (expression -> NOT expression .)
    $end            reduce using rule 8 (expression -> NOT expression .)
    RPAR            reduce using rule 8 (expression -> NOT expression .)

  ! AND             [ shift and go to state 12 ]
  ! OR              [ shift and go to state 13 ]
  ! IMPLIES         [ shift and go to state 14 ]
  ! DIMPLIES        [ shift and go to state 15 ]
  ! UNTIL           [ shift and go to state 16 ]


state 18

    (9) expression -> NEXT expression .
    (3) expression -> expression . AND expression
    (4) expression -> expression . OR expression
    (5) expression -> expression . IMPLIES expression
    (6) expression -> expression . DIMPLIES expression
    (7) expression -> expression . UNTIL expression

    AND             reduce using rule 9 (expression -> NEXT expression .)
    OR              reduce using rule 9 (expression -> NEXT expression .)
    IMPLIES         reduce using rule 9 (expression -> NEXT expression .)
    DIMPLIES        reduce using rule 9 (expression -> NEXT expression .)
    UNTIL           reduce using rule 9 (expression -> NEXT expression .)
    $end            reduce using rule 9 (expression -> NEXT expression .)
    RPAR            reduce using rule 9 (expression -> NEXT expression .)

  ! AND             [ shift and go to state 12 ]
  ! OR              [ shift and go to state 13 ]
  ! IMPLIES         [ shift and go to state 14 ]
  ! DIMPLIES        [ shift and go to state 15 ]
  ! UNTIL           [ shift and go to state 16 ]


state 19

    (10) expression -> EVENTUALLY expression .
    (3) expression -> expression . AND expression
    (4) expression -> expression . OR expression
    (5) expression -> expression . IMPLIES expression
    (6) expression -> expression . DIMPLIES expression
    (7) expression -> expression . UNTIL expression

    AND             reduce using rule 10 (expression -> EVENTUALLY expression .)
    OR              reduce using rule 10 (expression -> EVENTUALLY expression .)
    IMPLIES         reduce using rule 10 (expression -> EVENTUALLY expression .)
    DIMPLIES        reduce using rule 10 (expression -> EVENTUALLY expression .)
    UNTIL           reduce using rule 10 (expression -> EVENTUALLY expression .)
    $end            reduce using rule 10 (expression -> EVENTUALLY expression .)
    RPAR            reduce using rule 10 (expression -> EVENTUALLY expression .)

  ! AND             [ shift and go to state 12 ]
  ! OR              [ shift and go to state 13 ]
  ! IMPLIES         [ shift and go to state 14 ]
  ! DIMPLIES        [ shift and go to state 15 ]
  ! UNTIL           [ shift and go to state 16 ]


state 20

    (11) expression -> GLOBALLY expression .
    (3) expression -> expression . AND expression
    (4) expression -> expression . OR expression
    (5) expression -> expression . IMPLIES expression
    (6) expression -> expression . DIMPLIES expression
    (7) expression -> expression . UNTIL expression

    AND             reduce using rule 11 (expression -> GLOBALLY expression .)
    OR              reduce using rule 11 (expression -> GLOBALLY expression .)
    IMPLIES         reduce using rule 11 (expression -> GLOBALLY expression .)
    DIMPLIES        reduce using rule 11 (expression -> GLOBALLY expression .)
    UNTIL           reduce using rule 11 (expression -> GLOBALLY expression .)
    $end            reduce using rule 11 (expression -> GLOBALLY expression .)
    RPAR            reduce using rule 11 (expression -> GLOBALLY expression .)

  ! AND             [ shift and go to state 12 ]
  ! OR              [ shift and go to state 13 ]
  ! IMPLIES         [ shift and go to state 14 ]
  ! DIMPLIES        [ shift and go to state 15 ]
  ! UNTIL           [ shift and go to state 16 ]


state 21

    (12) expression -> LPAR expression . RPAR
    (3) expression -> expression . AND expression
    (4) expression -> expression . OR expression
    (5) expression -> expression . IMPLIES expression
    (6) expression -> expression . DIMPLIES expression
    (7) expression -> expression . UNTIL expression

    RPAR            shift and go to state 27
    AND             shift and go to state 12
    OR              shift and go to state 13
    IMPLIES         shift and go to state 14
    DIMPLIES        shift and go to state 15
    UNTIL           shift and go to state 16


state 22

    (3) expression -> expression AND expression .
    (3) expression -> expression . AND expression
    (4) expression -> expression . OR expression
    (5) expression -> expression . IMPLIES expression
    (6) expression -> expression . DIMPLIES expression
    (7) expression -> expression . UNTIL expression

    AND             reduce using rule 3 (expression -> expression AND expression .)
    OR              reduce using rule 3 (expression -> expression AND expression .)
    IMPLIES         reduce using rule 3 (expression -> expression AND expression .)
    DIMPLIES        reduce using rule 3 (expression -> expression AND expression .)
    UNTIL           reduce using rule 3 (expression -> expression AND expression .)
    $end            reduce using rule 3 (expression -> expression AND expression .)
    RPAR            reduce using rule 3 (expression -> expression AND expression .)

  ! AND             [ shift and go to state 12 ]
  ! OR              [ shift and go to state 13 ]
  ! IMPLIES         [ shift and go to state 14 ]
  ! DIMPLIES        [ shift and go to state 15 ]
  ! UNTIL           [ shift and go to state 16 ]


state 23

    (4) expression -> expression OR expression .
    (3) expression -> expression . AND expression
    (4) expression -> expression . OR expression
    (5) expression -> expression . IMPLIES expression
    (6) expression -> expression . DIMPLIES expression
    (7) expression -> expression . UNTIL expression

    AND             reduce using rule 4 (expression -> expression OR expression .)
    OR              reduce using rule 4 (expression -> expression OR expression .)
    IMPLIES         reduce using rule 4 (expression -> expression OR expression .)
    DIMPLIES        reduce using rule 4 (expression -> expression OR expression .)
    UNTIL           reduce using rule 4 (expression -> expression OR expression .)
    $end            reduce using rule 4 (expression -> expression OR expression .)
    RPAR            reduce using rule 4 (expression -> expression OR expression .)

  ! AND             [ shift and go to state 12 ]
  ! OR              [ shift and go to state 13 ]
  ! IMPLIES         [ shift and go to state 14 ]
  ! DIMPLIES        [ shift and go to state 15 ]
  ! UNTIL           [ shift and go to state 16 ]


state 24

    (5) expression -> expression IMPLIES expression .
    (3) expression -> expression . AND expression
    (4) expression -> expression . OR expression
    (5) expression -> expression . IMPLIES expression
    (6) expression -> expression . DIMPLIES expression
    (7) expression -> expression . UNTIL expression

    AND             reduce using rule 5 (expression -> expression IMPLIES expression .)
    OR              reduce using rule 5 (expression -> expression IMPLIES expression .)
    IMPLIES         reduce using rule 5 (expression -> expression IMPLIES expression .)
    DIMPLIES        reduce using rule 5 (expression -> expression IMPLIES expression .)
    UNTIL           reduce using rule 5 (expression -> expression IMPLIES expression .)
    $end            reduce using rule 5 (expression -> expression IMPLIES expression .)
    RPAR            reduce using rule 5 (expression -> expression IMPLIES expression .)

  ! AND             [ shift and go to state 12 ]
  ! OR              [ shift and go to state 13 ]
  ! IMPLIES         [ shift and go to state 14 ]
  ! DIMPLIES        [ shift and go to state 15 ]
  ! UNTIL           [ shift and go to state 16 ]


state 25

    (6) expression -> expression DIMPLIES expression .
    (3) expression -> expression . AND expression
    (4) expression -> expression . OR expression
    (5) expression -> expression . IMPLIES expression
    (6) expression -> expression . DIMPLIES expression
    (7) expression -> expression . UNTIL expression

    AND             reduce using rule 6 (expression -> expression DIMPLIES expression .)
    OR              reduce using rule 6 (expression -> expression DIMPLIES expression .)
    IMPLIES         reduce using rule 6 (expression -> expression DIMPLIES expression .)
    DIMPLIES        reduce using rule 6 (expression -> expression DIMPLIES expression .)
    UNTIL           reduce using rule 6 (expression -> expression DIMPLIES expression .)
    $end            reduce using rule 6 (expression -> expression DIMPLIES expression .)
    RPAR            reduce using rule 6 (expression -> expression DIMPLIES expression .)

  ! AND             [ shift and go to state 12 ]
  ! OR              [ shift and go to state 13 ]
  ! IMPLIES         [ shift and go to state 14 ]
  ! DIMPLIES        [ shift and go to state 15 ]
  ! UNTIL           [ shift and go to state 16 ]


state 26

    (7) expression -> expression UNTIL expression .
    (3) expression -> expression . AND expression
    (4) expression -> expression . OR expression
    (5) expression -> expression . IMPLIES expression
    (6) expression -> expression . DIMPLIES expression
    (7) expression -> expression . UNTIL expression

    AND             reduce using rule 7 (expression -> expression UNTIL expression .)
    OR              reduce using rule 7 (expression -> expression UNTIL expression .)
    IMPLIES         reduce using rule 7 (expression -> expression UNTIL expression .)
    DIMPLIES        reduce using rule 7 (expression -> expression UNTIL expression .)
    UNTIL           reduce using rule 7 (expression -> expression UNTIL expression .)
    $end            reduce using rule 7 (expression -> expression UNTIL expression .)
    RPAR            reduce using rule 7 (expression -> expression UNTIL expression .)

  ! AND             [ shift and go to state 12 ]
  ! OR              [ shift and go to state 13 ]
  ! IMPLIES         [ shift and go to state 14 ]
  ! DIMPLIES        [ shift and go to state 15 ]
  ! UNTIL           [ shift and go to state 16 ]


state 27

    (12) expression -> LPAR expression RPAR .

    AND             reduce using rule 12 (expression -> LPAR expression RPAR .)
    OR              reduce using rule 12 (expression -> LPAR expression RPAR .)
    IMPLIES         reduce using rule 12 (expression -> LPAR expression RPAR .)
    DIMPLIES        reduce using rule 12 (expression -> LPAR expression RPAR .)
    UNTIL           reduce using rule 12 (expression -> LPAR expression RPAR .)
    $end            reduce using rule 12 (expression -> LPAR expression RPAR .)
    RPAR            reduce using rule 12 (expression -> LPAR expression RPAR .)

